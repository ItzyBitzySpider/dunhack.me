datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique @default(dbgenerated("CONCAT('randomUser',SUBSTRING(UUID(),1,4))"))
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  enabled       Boolean   @default(true)
  competing     Boolean   @default(true)  
  role          Role      @default(USER)  
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model category {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  challenges  challenges[]
}

model ctfList {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  challenges  challenges[]
}

model challenges {
  id                            Int         @id @default(autoincrement())
  title                         String      @db.VarChar(255)
  category                      category    @relation(fields: [categoryId], references: [id])
  categoryId                    Int         @db.Int
  ctfName                       ctfList     @relation(fields: [ctfNameId], references: [id])
  ctfNameId                     Int         @db.Int
  description                   String      @db.Text
  hints                         hints[]
  files                         files[]
  writeups                      writeups[]
  exposed                       Boolean     @default(true)
  flag                          String      @db.Text
  case_insensitive              Boolean     @default(true)
  points                        Int      
  solves                        Int         @db.UnsignedInt @default(0)
  min_seconds_btwn_submissions  Int         @db.UnsignedSmallInt @default(5)
}

model hints {
  id                 Int             @id @default(autoincrement())
  challenge          challenges      @relation(fields: [challengeId], references: [id])
  challengeId        Int
  body               String          @db.Text
}

model files {
  id                 Int             @id @default(autoincrement())
  challenge          challenges      @relation(fields: [challengeId], references: [id])
  challengeId        Int
  title              String          @db.VarChar(255)
  url                String          @db.Text
}

model writeups {
  id                 Int             @id @default(autoincrement())
  challenge          challenges      @relation(fields: [challengeId], references: [id])
  challengeId        Int
  link               String          @db.Text
}

model submissions {
  id                            Int      @id @default(autoincrement())
  added                         DateTime
  challengeId                   Int      @db.UnsignedInt
  userId                        String
  flag                          String   @db.Text
  correct                       Boolean  @default(false)
}

model announcements {
  id                 Int      @id @default(autoincrement())
  added              DateTime
  added_by           String
  title              String   @db.VarChar(255)
  body               String   @db.Text
}

model email_whitelist {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
}

model exceptions {
  id                 Int       @id @default(autoincrement())
  added              DateTime
  message            String    @db.Text
  code               String    @db.VarChar(255)
  trace              String    @db.Text
}


